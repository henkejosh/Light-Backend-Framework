exit
file
rile
s
res
file
n
s
n
full_path
n
dir_path
n
res
n
req
n
s
n
c
s
req.path
exit
env
n
is_file?(full_path)
file
exit
is_file?(full_path)
File.exist?(full_path)
full_path
exit
full_path
exit
a[1] == @root_dir.to_s
a[0]
@root_dir.to_s
@root_dir
a[0] == @root_dir.to_s
a
a = req.path.split("/")
root_path?(req.path)
req.path
exit
req.path
req
exit
env
exit
"#{line_nos[i] + 1}:  #{line}"
n
l
n
relevant_lines[i + 1]
s
line.lstrip[0..2]
line.lstrip
c
display line
c
exit
c
"#{line_nos[i] + 1}:  #{line}"
line
n
line[0..2]
line
n
line
n
line
n
line
n
line
n
s
line[0..2]
c
cc
c
"#{line_nos[i]}: #{line}"
relevant_lines
exit
relevant_lines
exit
c
cc
c
idx
c
line_nos
file_code.length
line_nos.include?(idx)
idx
exit
lines
lins
lines.include?(idx)
idx
exit
formatted_lines
lines
c
relevant_lines
exit
relevant_lines
exit
a.lineno
a.each { |l| p l.lineno }
a = File.read(file)
a = File.read(a)
file
file_code.each { |l| p l.lineno }
file_code.lineno
c
exit
eixt
file_code.select.with_index { |a, i| i == 5 }
file_code.each_index.select { |i| i == 5 }
file_code.with_index.select { |i| i == 5 }
file_code.select.each_index { |i| i == 5 }
file_code[5]
file_code.select.with_index { |i| i == 5 }
file_code = File.readlines(file)
file_code.select.with_index { |i| i == 5 }
File.readlines(file)
error_line
file
c
this
error_line
file
c
exit
lines[23]
lines[a.split(":")[1].to_i]
a.split(":")[1]
a.split(":").last
lines
lines[a.split(":").last]
lines[a.split(":")[1]]
lines = File.readlines(file)
File.read(file)
file
file = a.split(":").first
a.first
a = find_error_line(e)
exit
c
exit
e.backtrace_locations
e.methods
e
res
content
body
exit
e.backtrace
e.message
p e
[ e
e.inspect
e.class
e.errors
e.read
e
exit
a.to_i
a.read
env.read
env.keys
a.inspect
a.to_s
a[0]
a.first
a.class
a
a = env["rack.errors"]
a = _
env["rack.errors"]
env[rack.errors]
env
req
self
Rack::Response.new()
Rack::Request.new()
Rack::Request
Rack
self
env["REQUEST_PATH"]
env[REQUEST_PATH]
env.REQUEST_PATH
env
c
self[key]
self
@store
value
key
c
flash
c
@now
@data
key
c
n
value
key
c
@now
@data
key
exit
@data
@cycle
c
@cycle
c
@data
@cycle
exit
@cycle
c
@data
value
key
c
@now
@data
key
c
key
c
value
key
exit
c
match(req)
req
c
res
req
c
display action_name
display controller_class
display http_method
display pattern
c
action_name
controller_class
http_method
pattern
exit
self
